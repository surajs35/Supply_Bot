
SUPPLY BOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010c  00800100  00800100  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106a  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084a  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082e  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c6  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000079e  00000000  00000000  00002e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000035b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 30       	cpi	r26, 0x0C	; 12
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  88:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
? * Function Name:brightness
? * Input: value for dcmotor(wheels) speed
? * Output: speed of dc motor controlled
 ******************************************************************************/
void brightness (unsigned char red_led){
	OCR2A = (unsigned char)red_led; 	// setting the speed of motor from 0-255
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ae:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b2:	28 71       	andi	r18, 0x18	; 24
  b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <UART_RxHead>
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	99 27       	eor	r25, r25
  c0:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <UART_RxTail>
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	84 17       	cp	r24, r20
  c8:	95 07       	cpc	r25, r21
  ca:	39 f0       	breq	.+14     	; 0xda <__vector_18+0x4a>
  cc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UART_RxHead>
  d0:	fc 01       	movw	r30, r24
  d2:	eb 5f       	subi	r30, 0xFB	; 251
  d4:	fe 4f       	sbci	r31, 0xFE	; 254
  d6:	30 83       	st	Z, r19
  d8:	01 c0       	rjmp	.+2      	; 0xdc <__vector_18+0x4c>
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	5f 91       	pop	r21
  ea:	4f 91       	pop	r20
  ec:	3f 91       	pop	r19
  ee:	2f 91       	pop	r18
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_19>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
 10c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <UART_TxHead>
 110:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 114:	98 17       	cp	r25, r24
 116:	79 f0       	breq	.+30     	; 0x136 <__vector_19+0x3c>
 118:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <UART_TxTail>
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	8f 77       	andi	r24, 0x7F	; 127
 122:	99 27       	eor	r25, r25
 124:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <UART_TxTail>
 128:	fc 01       	movw	r30, r24
 12a:	eb 57       	subi	r30, 0x7B	; 123
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	80 81       	ld	r24, Z
 130:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 134:	05 c0       	rjmp	.+10     	; 0x140 <__vector_19+0x46>
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8f 7d       	andi	r24, 0xDF	; 223
 13e:	80 83       	st	Z, r24
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <uart0_init>:
 152:	f8 94       	cli
 154:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <UART_TxHead>
 158:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <UART_TxTail>
 15c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_RxHead>
 160:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <UART_RxTail>
 164:	78 94       	sei
 166:	99 23       	and	r25, r25
 168:	24 f4       	brge	.+8      	; 0x172 <uart0_init+0x20>
 16a:	22 e0       	ldi	r18, 0x02	; 2
 16c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 170:	9f 77       	andi	r25, 0x7F	; 127
 172:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 17a:	88 e9       	ldi	r24, 0x98	; 152
 17c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 186:	08 95       	ret

00000188 <uart0_getc>:
 188:	f8 94       	cli
 18a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <UART_RxHead>
 18e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART_RxTail>
 192:	98 13       	cpse	r25, r24
 194:	04 c0       	rjmp	.+8      	; 0x19e <uart0_getc+0x16>
 196:	78 94       	sei
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	08 95       	ret
 19e:	78 94       	sei
 1a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART_RxTail>
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	8f 77       	andi	r24, 0x7F	; 127
 1aa:	99 27       	eor	r25, r25
 1ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <UART_RxTail>
 1b0:	fc 01       	movw	r30, r24
 1b2:	eb 5f       	subi	r30, 0xFB	; 251
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	20 81       	ld	r18, Z
 1b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	98 2f       	mov	r25, r24
 1c0:	88 27       	eor	r24, r24
 1c2:	82 0f       	add	r24, r18
 1c4:	91 1d       	adc	r25, r1
 1c6:	08 95       	ret

000001c8 <uart0_flush>:
 1c8:	f8 94       	cli
 1ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <UART_RxTail>
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UART_RxHead>
 1d2:	78 94       	sei
 1d4:	08 95       	ret

000001d6 <striking>:
 1d6:	21 9a       	sbi	0x04, 1	; 4
 1d8:	29 9a       	sbi	0x05, 1	; 5
 1da:	08 95       	ret

000001dc <motor_direction>:
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	84 69       	ori	r24, 0x94	; 148
 1e0:	8a b9       	out	0x0a, r24	; 10
 1e2:	20 9a       	sbi	0x04, 0	; 4
 1e4:	08 95       	ret

000001e6 <uart0_readByte>:
 1e6:	0e 94 c4 00 	call	0x188	; 0x188 <uart0_getc>
 1ea:	91 11       	cpse	r25, r1
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <uart0_readByte+0xe>
 1ee:	88 23       	and	r24, r24
 1f0:	19 f0       	breq	.+6      	; 0x1f8 <uart0_readByte+0x12>
 1f2:	08 95       	ret
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	08 95       	ret
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	08 95       	ret

000001fc <ADCsingleREAD>:
 1fc:	ec e7       	ldi	r30, 0x7C	; 124
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 83       	st	Z, r24
 202:	80 81       	ld	r24, Z
 204:	80 64       	ori	r24, 0x40	; 64
 206:	80 83       	st	Z, r24
 208:	80 81       	ld	r24, Z
 20a:	8f 7d       	andi	r24, 0xDF	; 223
 20c:	80 83       	st	Z, r24
 20e:	ea e7       	ldi	r30, 0x7A	; 122
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	87 60       	ori	r24, 0x07	; 7
 216:	80 83       	st	Z, r24
 218:	80 81       	ld	r24, Z
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	80 83       	st	Z, r24
 21e:	80 81       	ld	r24, Z
 220:	80 64       	ori	r24, 0x40	; 64
 222:	80 83       	st	Z, r24
 224:	80 81       	ld	r24, Z
 226:	86 fd       	sbrc	r24, 6
 228:	fd cf       	rjmp	.-6      	; 0x224 <ADCsingleREAD+0x28>
 22a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 22e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	98 2f       	mov	r25, r24
 236:	88 27       	eor	r24, r24
 238:	82 0f       	add	r24, r18
 23a:	91 1d       	adc	r25, r1
 23c:	08 95       	ret

0000023e <timer2_init>:
 23e:	f8 94       	cli
 240:	a1 eb       	ldi	r26, 0xB1	; 177
 242:	b0 e0       	ldi	r27, 0x00	; 0
 244:	1c 92       	st	X, r1
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
 24c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 250:	e0 eb       	ldi	r30, 0xB0	; 176
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 68       	ori	r24, 0x80	; 128
 258:	80 83       	st	Z, r24
 25a:	80 81       	ld	r24, Z
 25c:	8f 7b       	andi	r24, 0xBF	; 191
 25e:	80 83       	st	Z, r24
 260:	80 81       	ld	r24, Z
 262:	81 60       	ori	r24, 0x01	; 1
 264:	80 83       	st	Z, r24
 266:	80 81       	ld	r24, Z
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	80 83       	st	Z, r24
 26c:	8c 91       	ld	r24, X
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	8c 93       	st	X, r24
 272:	8c 91       	ld	r24, X
 274:	8c 7f       	andi	r24, 0xFC	; 252
 276:	8c 93       	st	X, r24
 278:	8c 91       	ld	r24, X
 27a:	84 60       	ori	r24, 0x04	; 4
 27c:	8c 93       	st	X, r24
 27e:	78 94       	sei
 280:	08 95       	ret

00000282 <led_init>:
? * Function Name:led_init
? * Output: speed control of motors
? * purpose:setting the pin as ouput
 ******************************************************************************/
void led_init(void){
	DDRB    |= (1 << motor2);
 282:	23 9a       	sbi	0x04, 3	; 4
	PORTB   |= (1 << motor2);
 284:	2b 9a       	sbi	0x05, 3	; 5
 286:	08 95       	ret

00000288 <init_devices>:
 /******************************************************************************
? * Function Name:init_devices
? * Output:initializing speed control functions
 ******************************************************************************/
void init_devices (void) {
	led_init();
 288:	0e 94 41 01 	call	0x282	; 0x282 <led_init>
	timer2_init();
 28c:	0e 94 1f 01 	call	0x23e	; 0x23e <timer2_init>
 290:	08 95       	ret

00000292 <motor_control>:
? * Logic: using digital values to control the direction of movement of the bot along the white line
 ******************************************************************************/
void motor_control(int ADCvalue1,int ADCvalue2,int ADCvalue3)
{
	
	if (ADCvalue1 >  ADCvalue2  && ADCvalue3 >  ADCvalue2  )
 292:	68 17       	cp	r22, r24
 294:	79 07       	cpc	r23, r25
 296:	84 f4       	brge	.+32     	; 0x2b8 <motor_control+0x26>
 298:	64 17       	cp	r22, r20
 29a:	75 07       	cpc	r23, r21
 29c:	2c f4       	brge	.+10     	; 0x2a8 <motor_control+0x16>
	{ //moving forward
		PORTD |= (1<< m1);
 29e:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &=~(1<< m2);
 2a0:	5c 98       	cbi	0x0b, 4	; 11
		PORTD |= (1<<m3);
 2a2:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB &=~(1<< m4);
 2a4:	28 98       	cbi	0x05, 0	; 5
 2a6:	08 95       	ret
		
	}
	
	else if(ADCvalue1>ADCvalue2 && ADCvalue2> ADCvalue3 ){
 2a8:	46 17       	cp	r20, r22
 2aa:	57 07       	cpc	r21, r23
 2ac:	84 f4       	brge	.+32     	; 0x2ce <motor_control+0x3c>
		//left rotation
		PORTD |= (1<< m1);
 2ae:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1<< m2);
 2b0:	5c 98       	cbi	0x0b, 4	; 11
		PORTD &= ~(1<<m3);
 2b2:	5f 98       	cbi	0x0b, 7	; 11
		PORTB &= ~(1<< m4);
 2b4:	28 98       	cbi	0x05, 0	; 5
 2b6:	08 95       	ret
		
	}
	else if(ADCvalue1<ADCvalue2 && ADCvalue3>ADCvalue2){
 2b8:	86 17       	cp	r24, r22
 2ba:	97 07       	cpc	r25, r23
 2bc:	44 f4       	brge	.+16     	; 0x2ce <motor_control+0x3c>
 2be:	64 17       	cp	r22, r20
 2c0:	75 07       	cpc	r23, r21
 2c2:	2c f4       	brge	.+10     	; 0x2ce <motor_control+0x3c>
		//right rotation
		PORTD &=~(1<< m1);
 2c4:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &=~(1<< m2);
 2c6:	5c 98       	cbi	0x0b, 4	; 11
		PORTD |= (1<<m3);
 2c8:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB &=~(1<< m4);
 2ca:	28 98       	cbi	0x05, 0	; 5
 2cc:	08 95       	ret
		
	}
	
	else
	{  //stop
		PORTD &=~(1<< m1);
 2ce:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &=~(1<< m2);
 2d0:	5c 98       	cbi	0x0b, 4	; 11
		PORTD &=~(1<<m3);
 2d2:	5f 98       	cbi	0x0b, 7	; 11
		PORTB &=~(1<< m4);
 2d4:	28 98       	cbi	0x05, 0	; 5
 2d6:	08 95       	ret

000002d8 <init_led>:
 /******************************************************************************
? * Function Name:init_led
? * purpose: declare the pin as output
 ******************************************************************************/ 
void init_led(){
	DDRB    |= (1 << PIN_LED_RED);     // initialize the pins PIN_LED_RED of port B as output pins.
 2d8:	25 9a       	sbi	0x04, 5	; 4
	PORTB   |= (1 << PIN_LED_RED);    
 2da:	2d 9a       	sbi	0x05, 5	; 5
 2dc:	08 95       	ret

000002de <led_redOff>:
 /******************************************************************************
? * Function Name:<Function Name>
? * Output:setting pin value as low
 ******************************************************************************/
void led_redOff(void){
	PORTB &= ~(1 << PIN_LED_RED);		// Make PBPIN_LED_RED Low
 2de:	2d 98       	cbi	0x05, 5	; 5
 2e0:	08 95       	ret

000002e2 <led_redOn>:
 /******************************************************************************
? * Function Name:led_redOn()
? * Output: setting pin value as high
  ******************************************************************************/
void led_redOn(void){
	PORTB |= (1 << PIN_LED_RED);		// Make PBPIN_LED_RED High
 2e2:	2d 9a       	sbi	0x05, 5	; 5
 2e4:	08 95       	ret

000002e6 <stopping>:
 /******************************************************************************
? * Function Name:stopping
? * Output: stops the motor at the striking point strikes the coin and then moves again to next supply relief point
 ******************************************************************************/
void stopping(){
	if(rx_byte == 's'){
 2e6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rx_byte>
 2ea:	83 37       	cpi	r24, 0x73	; 115
 2ec:	89 f5       	brne	.+98     	; 0x350 <stopping+0x6a>
		//Stop the motor.
		PORTD &= ~(1<< m1);
 2ee:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &= ~(1<< m2);
 2f0:	5c 98       	cbi	0x0b, 4	; 11
		PORTD &= ~(1<< m3);
 2f2:	5f 98       	cbi	0x0b, 7	; 11
		PORTB &= ~(1<< m4);
 2f4:	28 98       	cbi	0x05, 0	; 5
		//Buzzer for twice
		led_redOn();
 2f6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <led_redOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	83 ed       	ldi	r24, 0xD3	; 211
 2fe:	90 e3       	ldi	r25, 0x30	; 48
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <stopping+0x1a>
 308:	00 c0       	rjmp	.+0      	; 0x30a <stopping+0x24>
 30a:	00 00       	nop
		_delay_ms(1000);
		led_redOff();
 30c:	0e 94 6f 01 	call	0x2de	; 0x2de <led_redOff>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	83 ed       	ldi	r24, 0xD3	; 211
 314:	90 e3       	ldi	r25, 0x30	; 48
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <stopping+0x30>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <stopping+0x3a>
 320:	00 00       	nop
		_delay_ms(1000);
		led_redOn();
 322:	0e 94 71 01 	call	0x2e2	; 0x2e2 <led_redOn>
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	83 ed       	ldi	r24, 0xD3	; 211
 32a:	90 e3       	ldi	r25, 0x30	; 48
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <stopping+0x46>
 334:	00 c0       	rjmp	.+0      	; 0x336 <stopping+0x50>
 336:	00 00       	nop
		_delay_ms(1000);
		//Striking mechanism.
		while(1){
			striking();
 338:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <striking>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	83 ec       	ldi	r24, 0xC3	; 195
 340:	99 e0       	ldi	r25, 0x09	; 9
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <stopping+0x5c>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <stopping+0x66>
 34c:	00 00       	nop
 34e:	f4 cf       	rjmp	.-24     	; 0x338 <stopping+0x52>
 350:	08 95       	ret

00000352 <main>:
/******************************************************************************
? * Function Name: main
? * Output: movement of the bot towards the relief aid
 *****************************************************************************/
int main(void){
uart0_init(UART_BAUD_SELECT(9600, F_CPU));
 352:	87 e6       	ldi	r24, 0x67	; 103
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 a9 00 	call	0x152	; 0x152 <uart0_init>
uart0_flush();
 35a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart0_flush>
int ADCvalue1=0;
int ADCvalue2=0;
int ADCvalue3=0;
char rx_byte;
init_devices();
 35e:	0e 94 44 01 	call	0x288	; 0x288 <init_devices>
? * Function Name:brightness
? * Input: value for dcmotor(wheels) speed
? * Output: speed of dc motor controlled
 ******************************************************************************/
void brightness (unsigned char red_led){
	OCR2A = (unsigned char)red_led; 	// setting the speed of motor from 0-255
 362:	86 e9       	ldi	r24, 0x96	; 150
 364:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
int ADCvalue2=0;
int ADCvalue3=0;
char rx_byte;
init_devices();
brightness(150);
motor_direction();
 368:	0e 94 ee 00 	call	0x1dc	; 0x1dc <motor_direction>
init_led();
 36c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <init_led>
while(1){
	rx_byte = uart0_readByte();
 370:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart0_readByte>
	if(rx_byte == 'm'){
 374:	8d 36       	cpi	r24, 0x6D	; 109
 376:	e1 f7       	brne	.-8      	; 0x370 <main+0x1e>
}

	if(rx_byte == 'm'){
		//White line and motor driver.
		while(1){
		ADCvalue1= ADCsingleREAD(0);
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ADCsingleREAD>
 37e:	ec 01       	movw	r28, r24
		ADCvalue2= ADCsingleREAD(1);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ADCsingleREAD>
 386:	8c 01       	movw	r16, r24
		ADCvalue3= ADCsingleREAD(2);
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <ADCsingleREAD>
		motor_control(ADCvalue1,ADCvalue2,ADCvalue3);
 38e:	ac 01       	movw	r20, r24
 390:	b8 01       	movw	r22, r16
 392:	ce 01       	movw	r24, r28
 394:	0e 94 49 01 	call	0x292	; 0x292 <motor_control>
		rx_byte=uart0_readByte();
 398:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <uart0_readByte>
		if (rx_byte == 's'){
 39c:	83 37       	cpi	r24, 0x73	; 115
 39e:	61 f7       	brne	.-40     	; 0x378 <main+0x26>
		}
		}
	}
while (1)
{
stopping();
 3a0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stopping>
 3a4:	fd cf       	rjmp	.-6      	; 0x3a0 <main+0x4e>

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
